5.1 什么是线程
	答：先理解进程在理解线程。
	什么是进程呢？
		进程是指运行中的应用程序，每个进程都有自己独立的地址空间(内存空间)，比如用户点击桌面的IE浏览器，就启动了一个进程，操作系统就会为该进程分配独立的地址空间。当用户再次点击左面的IE浏览器，又启动了一个进程，操作系统将为新的进程分配新的独立的地址空间。目前操作系统都支持多进程。

	什么是线程呢？
		是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。线程有就绪、阻塞和运行三种基本状态。

	线程
	1、线程是轻量级的进程
	2、线程没有独立的地址空间(内存空间)
	3、线程是由进程创建的(寄生在进程)
	4、一个进程可以拥有多个线程-->这就是我们常说的多线程编程
	5、线程有几种状态：
  		a、新建状态(new)
  		b、就绪状态(Runnable)
  		c、运行状态(Running)
  		d、阻塞状态(Blocked)
 		 e、死亡状态(Dead)

	线程有什么用处
		java程序中流传一句话，不会使用线程就别跟别人说自己学过java。目前绝大部分应用程序都会涉及到多并发的问题。只要应用程序涉及到并发，就离不开多线程编程。

	线程--如何使用？
		在java中一个类要当作线程来使用有两种方法。
		1、继承Thread类，并重写run函数
		2、实现Runnable接口，并重写run函数
		因为java是单继承的，在某些情况下一个类可能已经继承了某个父类，这时在用继承Thread类方法来创建线程显然不可能java设计者们提供了另外一个方式创建线程，就是通过实现Runnable接口来创建线程。
	要点：用户每启动一个进程，操作系统就会为该进程分配一个独立的内存空间。


5.2 线程和进程有什么区别
	进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。但对于一些要求同时进行并且又要共享某些变量的并发操作，只能用线程，不能用进程。

	1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.
	2) 线程的划分尺度小于进程，使得多线程程序的并发性高。
	3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。
	4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。
	5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。

参考：http://www.cnblogs.com/lgk8023/p/6430592.html




5.3 如何在 Java 中使用新线程
	继承Thread类，实现Runnable接口， 直接在main函数实例化Thread，直接在函数体使用（匿名内部类）



5.4 start() 和 run() 有什么区别
	run()方法：可以重复多次调用（它是算是一个普通的方法）；
	start()方法:启动一个线程。


5.5 Thread.join 方法有什么用
	使两条交替运行的线程按顺序执行，要是B方法中调用了A中的join方法，那A方法将等待B方法执行完之后再执行


5.6 假如新建T1、T2、T3三个线程，如何保证它们按顺序执行？
	使用Thread类中的join方法


5.7 volatile 变量是做什么的
	volatile变量的意思是易变的，它的主要作用是避免编译器优化，编译器优化是什么意思？
    举个例子，为了避免过多的访问内存，编译器会为变量作一个cache,里面会存放上变量的copy, 这样就会提高程序执行效率，而变量如果加了volatile, 那么编译器就不会做这样的优化，每次用到该变量时，都会去内存取一次，从而保证取到的是变量的最新的值。通常下面情况下要用到该变量。

    volatile的本意是“易变的”



5.8 如果一个线程中发生了异常会怎么样
	这是我在一次面试中遇到的一个很刁钻的Java面试题, 简单的说，如果异常没有被捕获该线程将会停止执行。Thread.UncaughtExceptionHandler是用于处理未捕获异常造成线程突然中断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候JVM会使用Thread.getUncaughtExceptionHandler()来查询线程的UncaughtExceptionHandler并将线程和异常作为参数传递给handler的uncaughtException()方法进行处理


5.9 什么是 ThreadLocal 变量
	ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题
	ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储，其实意思差不多。可能很多朋友都知道ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。
	(1). 通过ThreadLocal创建的副本是存储在每个线程自己的threadLocals中的；
	(2). 为何threadLocals的类型ThreadLocalMap的键值为ThreadLocal对象，因为每个线程中可有多个threadLocal变量，就像上面代码中的longLocal和stringLocal；
	(3). 在进行get之前，必须先set，否则会报空指针异常；如果想在get之前不需要调用set就能正常访问的话，必须重写initialValue()方法。
	最常见的ThreadLocal使用场景为 用来解决 数据库连接、Session管理等


5.10 什么是线程池，为什么要使用
5.11 Thread.sleep 和 wait 方法有什么不同
5.12 synchronized 关键词是做什么的
	线程同步的意思